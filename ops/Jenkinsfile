pipeline {
  agent { label 'cyxtera-portal-backend' }
  environment {
    IMAGE_NAME = ""
  }
  stages {

    stage('Build') {
      steps {
        notifySlack()
        echo "Installing dependencies"
        sh "npm install"
      }
    }

    stage('Unit Test') {
      steps {
        echo "Running unit tests"
        # sh "npm test"
        # junit 'reports/junit/*.xml'
      }
    }

    stage('Code Analysis') {
      steps {
        echo "Running static code analysis"
      }
    }

    stage('Artifacts Build') {
      steps {
        echo "Building artifacts"
        script {
          docker.withRegistry("https://registry-prod.easysol.net", 'uportal_portus_production') {
            def image = docker.build("cyxtera_portal_backend/portal-fe:${env.BUILD_NUMBER}", "-f ops/Dockerfile .")
            image.push()
          }
        }
        sh "docker rmi cyxtera_portal_backend/portal-fe:${env.BUILD_NUMBER}"
      }
    }
  }

  post {
    // only triggered when blue or green sign
    success {
      echo "Sending slack notification because of build success"
      notifySlack('SUCCESS')
    }
    // triggered when red sign
    failure {
      echo "Sending slack notification because of build failure"
      notifySlack('FAILURE')
    }
    unstable {
      echo "Sending slack notification because of unstable build"
      notifySlack('UNSTABLE')
    }
  }
}

def notifySlack(String buildStatus = 'STARTED') {
  // Build status of null means success.
  buildStatus = buildStatus ?: 'SUCCESS'

  def color

  if (buildStatus == 'STARTED') {
    color = '#D4DADF'
  } else if (buildStatus == 'SUCCESS') {
    color = '#BDFFC3'
  } else if (buildStatus == 'UNSTABLE') {
    color = '#FFFE89'
  } else {
    color = '#FF9FA1'
  }

  def msg = "${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}:\n${env.BUILD_URL}"
  def baseUrl = "https://portalrangers.slack.com/services/hooks/jenkins-ci/"
  def channel = "continuous-delivery"
  def token = "Cyxtera-Portal"

  slackSend(baseUrl: baseUrl, channel: channel, color: color, message: msg, tokenCredentialId: token)
}
